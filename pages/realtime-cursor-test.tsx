import type { NextPage } from 'next';
import Head from 'next/head';
import React, { useEffect, useState } from "react";
import useCreateRealtimeCursor from '../api/gqlFunctions/useCreateRealtimeCursor';
import useOnCreateRealtimeCursor from '../api/gqlFunctions/useOnCreateRealtimeCursor';
import { CursorAnimate } from '../components/CursorAnimate';
import User from '../models/User';
import styles from '../styles/Home.module.css';

export async function getServerSideProps(context: any) { //typeないの？
    // URL情報は取れる
    const host = context.req.headers.host
    const path = context.resolvedUrl
    const url = host + path
    return {
        props: {
            url: url
        },
    };

}


const Home: NextPage = (props: any) => {
    const [time, setTime] = useState(0)
    const [displayCursorList, setDisplayCursorList] = useState([])
    const [yourCursorPosition, setYourCursorPosition] = useState({ x: 0, y: 0 })
    const { url } = props
    const [createRealtimeCursor] = useCreateRealtimeCursor()

    const _onMouseMove = (e) => {
        setYourCursorPosition({ x: e.clientX, y: e.clientY });
    }

    useEffect(() => {
        const timer = setTimeout(() => {
            setTime(time + 1);
            if (!yourCursorPosition.x) return
            if (!yourCursorPosition.y) return
            const user = new User()
            createRealtimeCursor(
                {
                    variables:
                    {
                        url: "URL#" + url, userId: "UserId#" + user.userId,
                        x: yourCursorPosition.x, y: yourCursorPosition.y,
                        updatedAt: user.updatedAt
                    }
                }
            )
        }, 500);
        return () => {
            clearTimeout(timer);
        };
    }, [time]);


    //Subscription
    const onCreateRealtimeCursorResponse = useOnCreateRealtimeCursor(url)

    useEffect(() => {
        const createdCursor = onCreateRealtimeCursorResponse.data?.onCreateRealtimeCursor
        if (!createdCursor) {
            console.warn(onCreateRealtimeCursorResponse.data)
            return
        }
        const deleteUpdatedUser = displayCursorList.filter(d => d.SK !== createdCursor.SK)
        const joined = deleteUpdatedUser.concat(createdCursor);

        // １分前の実装としては最悪
        const now = new Date()
        now.setSeconds(now.getSeconds() - 5)
        const latestJoined = joined.filter(i => new Date(i.updatedAt) > now)
        const filtered = latestJoined.filter((element, index, self) =>
            self.findIndex(e =>
                e.SK === element.SK
            ) === index
        );


        setDisplayCursorList(filtered)
    }, [onCreateRealtimeCursorResponse.data])

    const renderCursors = () => {
        return displayCursorList.map(c => {
            return (
                <CursorAnimate key={c.SK} curPos={{ x: c.x, y: c.y }} userInfo={{ name: "tekitou", avatar: "🐴", color: "red" }} />
            )
        })
    }

    return (
        <div className={styles.container} onMouseMove={_onMouseMove}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}>
                    Welcome to <a href="https://nextjs.org">Next.js!</a>
                </h1>

                {renderCursors()}


            </main>
        </div>
    )
}

export default Home

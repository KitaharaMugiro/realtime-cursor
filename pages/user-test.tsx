import type { NextPage } from 'next';
import Head from 'next/head';
import React, { useEffect, useState } from "react";
import queryRealtimeUserGql from '../api/gql/queryRealtimeUserGql';
import { useCreateRealtimeUser } from '../api/gqlFunctions/useCreateRealtimeUser';
import { useOnCreateRealtimeUser } from '../api/gqlFunctions/useOnCreateRealtimeUser';
import { useOnUpdateRealtimeUser } from '../api/gqlFunctions/useOnUpdateRealtimeUser';
import { useUpdateRealtimeUser } from '../api/gqlFunctions/useUpdateRealtimeUser';
import MyApolloClient from "../api/MyApolloClient";
import UserList from "../components/UserList";
import User from '../models/User';
import styles from '../styles/Home.module.css';

export async function getServerSideProps(context: any) { //typeないの？
    // URL情報は取れる
    const host = context.req.headers.host
    const path = context.resolvedUrl
    const url = host + path
    // UserIdは取れない。何か別の手段が必要
    const { data } = await MyApolloClient.query({
        query: queryRealtimeUserGql,
        variables: { url: "URL#" + url } //このロジックはどこかに埋めたいなあ
    });
    console.log(data)
    return {
        props: {
            realtimeUser: data.queryRealtimeUser.items,
            url: url
        },
    };

}


const Home: NextPage = (props: any) => {
    const [displayUserList, setDisplayUserList] = useState(props.realtimeUser)
    const { realtimeUser, url } = props
    const [createRealtimeUser] = useCreateRealtimeUser()
    const [updateRealtimeUser] = useUpdateRealtimeUser()
    useEffect(() => {
        // TODO: こんなロジックをフロントでもたないといけないわけがない
        // TODO: variablesの型を渡さないと厳しい
        const user = new User()
        createRealtimeUser({ variables: { url: "URL#" + url, userId: "UserId#" + user.userId, name: user.name, avator: user.avator, updatedAt: user.updatedAt } })
    }, [])

    useEffect(() => {
        // 定期的なpoke
        setInterval(() => {
            const user = new User()
            updateRealtimeUser(
                {
                    variables:
                        { url: "URL#" + url, userId: "UserId#" + user.userId, updatedAt: user.updatedAt }
                }
            )
        }, 5000)
    }, [])

    //Subscription
    const onCreateRealtimeUserResponse = useOnCreateRealtimeUser(url)
    const onUpdateRealtimeUserResponse = useOnUpdateRealtimeUser(url)

    useEffect(() => {
        const createdUser = onCreateRealtimeUserResponse.data?.onCreateRealtimeUser
        if (!createdUser) {
            console.warn(onCreateRealtimeUserResponse.data)
            return
        }
        const joined = displayUserList.concat(createdUser);
        const filtered = joined.filter((element, index, self) =>
            self.findIndex(e =>
                e.SK === element.SK
            ) === index
        );
        setDisplayUserList(filtered)
    }, [onCreateRealtimeUserResponse.data])


    useEffect(() => {
        const updatedUser = onUpdateRealtimeUserResponse.data?.onUpdateRealtimeUser
        if (!updatedUser) {
            console.warn(onUpdateRealtimeUserResponse.data)
            return
        }
        const deleteUpdatedUser = displayUserList.filter(d => d.SK !== updatedUser.SK)
        const joined = deleteUpdatedUser.concat(updatedUser);
        const filtered = joined.filter((element, index, self) =>
            self.findIndex(e =>
                e.SK === element.SK
            ) === index
        );
        setDisplayUserList(filtered)
    }, [onUpdateRealtimeUserResponse.data])


    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <header className="header">
                <h1 className="header_text">
                    <a href="/" className="link_text">俺のサイト</a>
                </h1>

                <nav className="nav">
                    <ul className="ul">
                        <div>
                            <UserList realtimeUser={displayUserList} />
                        </div>
                    </ul>
                </nav>
            </header>


            <main className={styles.main}>
                <h1 className={styles.title}>
                    右上にオンラインのユーザを表示
                </h1>
            </main>
        </div>
    )
}

export default Home
